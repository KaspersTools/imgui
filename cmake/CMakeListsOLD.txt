cmake_minimum_required(VERSION 3.14)
project(imgui)

cmake_policy(SET CMP0077 NEW)

option(IMGUI_DEMO "Include the ImGui demo window implementation in library" ON)
option(IMGUI_DISABLE_OBSOLETE_FUNCTIONS "Disable deprecated functions" ON)
option(IMGUI_DISABLE_OBSOLETE_KEYIO "Disable legacy input handling" ON)
option(IMGUI_DISABLE_FILE_FUNCTIONS "Disable use of file functions" OFF)
option(IMGUI_ENABLE_STDLIB_SUPPORT "Enable extra functions taking stdlib types" OFF)
option(IMGUI_ENABLE_FREETYPE "Enable FreeType font rasterizer" ON)

#option(IMGUI_DISABLE_OBSOLETE_FUNCTIONS "Disable obsolete functions" ON)
#option(IMGUI_DISABLE_OBSOLETE_KEYIO "Disable obsolete key IO" ON)
#option(IMGUI_DISABLE_FILE_FUNCTIONS "Disable file functions" OFF)
#option(IMGUI_ENABLE_COVERAGE "Enable coverage" OFF)
#option(IMGUI_ENABLE_ASAN "Enable AddressSanitizer" OFF)
#option(IMGUI_ENABLE_FREETYPE "Enable FreeType" OFF)
#option(IMGUI_DEMO "Enable demo" ON)

###############################################################################
if (NOT DEFINED CMAKE_RUNTIME_OUTPUT_DIRECTORY)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
endif ()
if (NOT DEFINED CMAKE_LIBRARY_OUTPUT_DIRECTORY)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
endif ()
if (NOT DEFINED CMAKE_ARCHIVE_OUTPUT_DIRECTORY)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
endif ()
if (NOT DEFINED CMAKE_CXX_STANDARD)
    set(CMAKE_CXX_STANDARD 23)
endif ()

###############################################################################
# Warnings
###############################################################################
if (CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    add_compile_options(-Wall -Wextra -Wunused-parameter -Wformat -Wnarrowing -Wno-sign-conversion -Wno-error=declaration-after-statement) # $<$<COMPILE_LANGUAGE:CXX>:-pedantic>
    if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
        add_compile_options(-Wnontrivial-memaccess)
    endif ()
    if (NOT APPLE)
        add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-Wno-deprecated-copy>)
    endif ()
endif ()

# These warnings are overzealous in GCC and only practical to use with Clang.
if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    add_compile_options(-Wshadow)
endif ()

###############################################################################
# Main library
###############################################################################

message(STATUS "IMGUI_ROOT_DIR: ${IMGUI_ROOT_DIR}")
set(KDB_IMGUI_DIR "${IMGUI_ROOT_DIR}/KDB_ImGui")
message(STATUS "KDB_IMGUI_DIR: ${KDB_IMGUI_DIR}")

set(IMGUI_SOURCE_FILES
        ${IMGUI_ROOT_DIR}/imgui.cpp
        ${IMGUI_ROOT_DIR}/imgui_draw.cpp
        ${IMGUI_ROOT_DIR}/imgui_demo.cpp
        ${IMGUI_ROOT_DIR}/imgui_tables.cpp
        ${IMGUI_ROOT_DIR}/imgui_widgets.cpp
)

add_library(imgui STATIC ${IMGUI_SOURCE_FILES})
target_precompile_headers(imgui PUBLIC ${IMGUI_ROOT_DIR}/ppImGui.h)
target_include_directories(imgui PUBLIC ${IMGUI_ROOT_DIR})


###############################################################################
# GLFW
###############################################################################s
#set(GLFW_BUILD_EXAMPLES OFF CACHE INTERNAL "Build the GLFW example programs")
#set(GLFW_BUILD_TESTS OFF CACHE INTERNAL "Build the GLFW test programs")
#set(GLFW_BUILD_DOCS OFF CACHE INTERNAL "Build the GLFW documentation")
#set(GLFW_INSTALL OFF CACHE INTERNAL "Generate installation target")
#add_subdirectory(${IMGUI_ROOT_DIR}/../glfw ${CMAKE_CURRENT_BINARY_DIR}/glfw)
#target_link_libraries(glfw PUBLIC imgui)
#
#if (TARGET ${IMGUI_GLFW_TARGET})
#    message(STATUS "GLFW target found. Creating imgui-glfw.")
#    message(STATUS "IMGUI_GLFW_TARGET: ${IMGUI_GLFW_TARGET}")
#    message(STATUS "CMAKE_DL_LIBS: ${CMAKE_DL_LIBS}")
#
#    add_library(imgui-glfw INTERFACE)
#    target_sources(imgui-glfw INTERFACE
#            ${IMGUI_BACKENDS_DIR}/imgui_impl_glfw.h
#            ${IMGUI_BACKENDS_DIR}/imgui_impl_glfw.cpp
#    )
#    target_link_libraries(imgui-glfw INTERFACE ${CMAKE_DL_LIBS} ${IMGUI_GLFW_TARGET})
#    target_include_directories(imgui-glfw SYSTEM INTERFACE ${IMGUI_BACKENDS_DIR} ${GLFW_DIR}/deps)
#else ()
#    message(STATUS "IMGUI_IMPL_GLFW set to ON but GLFW could not be found.")
#endif ()

## Ignore silently when required headers are missing.
#set(CMAKE_REQUIRED_QUIET ON)
#include(CheckIncludeFile)
#find_package(PkgConfig QUIET)
#
#message(STATUS "IMGUI_IMPL_GLFW set to ON")
#
#if (IMGUI_GLFW_TARGET)
#    message(STATUS "IMGUI_GLFW_TARGET set to ${IMGUI_GLFW_TARGET}")
#    # Custom user target was set. No auto-detection required.
#elseif (TARGET glfw)
#    message(STATUS "GLFW exists already. Nothing to do.")
#    # GLFW exists already. Nothing to do.
#elseif (EXISTS ${IMGUI_ROOT_DIR}/../glfw/CMakeLists.txt)
#    message(STATUS "GLFW source code found. Building it.")
#    set(GLFW_BUILD_EXAMPLES OFF CACHE INTERNAL "Build the GLFW example programs")
#    set(GLFW_BUILD_TESTS OFF CACHE INTERNAL "Build the GLFW test programs")
#    set(GLFW_BUILD_DOCS OFF CACHE INTERNAL "Build the GLFW documentation")
#    set(GLFW_INSTALL OFF CACHE INTERNAL "Generate installation target")
#
#    add_subdirectory(${IMGUI_ROOT_DIR}/../glfw ${CMAKE_CURRENT_BINARY_DIR}/glfw)
#else ()
#    message(WARNING "IMGUI_IMPL_GLFW set to ON but GLFW could not be found.")
#endif ()
#target_link_libraries(glfw PUBLIC imgui)
#
################################################################################
## Vulkan
################################################################################
#find_package(Vulkan REQUIRED)
#if(Vulkan_FOUND)
#    message(STATUS "Vulkan found: ${Vulkan_INCLUDE_DIRS} ${Vulkan_LIBRARIES}")
#else()
#    message(FATAL_ERROR "Vulkan not found.")
#endif ()
#
################################################################################
## HBUI
################################################################################
#target_link_libraries(imgui-impl PUBLIC
#    imgui-glfw
#    Vulkan::Vulkan
#    HBUI
#)

###############################################################################
# Build Implementation
###############################################################################
set(IMPL_SOURCES
        ${IMGUI_ROOT_DIR}/backends/imgui_impl_glfw.h
        ${IMGUI_ROOT_DIR}/backends/imgui_impl_glfw.cpp
        ${IMGUI_ROOT_DIR}/backends/imgui_impl_vulkan.h
        ${IMGUI_ROOT_DIR}/backends/imgui_impl_vulkan.cpp

        ${KDB_IMGUI_DIR}/KDBConfig.h

        ${KDB_IMGUI_DIR}/backends/imgui_impl_vulkan_image.h
        ${KDB_IMGUI_DIR}/backends/imgui_impl_vulkan_image.cpp

        ${KDB_IMGUI_DIR}/Extension.h
        ${KDB_IMGUI_DIR}/Extension.cpp

        ${KDB_IMGUI_DIR}/themes/ThemeManager.h
        ${KDB_IMGUI_DIR}/themes/ThemeManager.cpp
        ${KDB_IMGUI_DIR}/themes/Themes.h
        ${KDB_IMGUI_DIR}/themes/Themes.cpp

        ${KDB_IMGUI_DIR}/math/ImVec2.h
        ${KDB_IMGUI_DIR}/math/MathOperations.h
)

#add_library(impl STATIC ${IMPL_SOURCES})
#target_include_directories(impl PUBLIC "imgui/backends/")
#target_link_libraries(impl PUBLIC
#        imgui
#        implot
#        glfw)

#
#if (IMGUI_DISABLE_OBSOLETE_FUNCTIONS)
#    target_compile_definitions(imgui PUBLIC -DIMGUI_DISABLE_OBSOLETE_FUNCTIONS=1)
#endif ()
#if (IMGUI_DISABLE_OBSOLETE_KEYIO)
#    target_compile_definitions(imgui PUBLIC -DIMGUI_DISABLE_OBSOLETE_KEYIO=1)
#endif ()
#if (IMGUI_DISABLE_FILE_FUNCTIONS)
#    target_compile_definitions(imgui PUBLIC -DIMGUI_DISABLE_FILE_FUNCTIONS=1)
#endif ()
#if (IMGUI_USER_CONFIG)
#    target_compile_definitions(imgui PUBLIC "-DIMGUI_USER_CONFIG=<${IMGUI_USER_CONFIG}>")
#endif ()
#if (NOT IMGUI_DEMO)
#    target_compile_definitions(imgui PUBLIC -DIMGUI_DISABLE_DEMO_WINDOWS=1)
#endif ()
#if (IMGUI_ENABLE_COVERAGE AND CMAKE_CXX_COMPILER_ID MATCHES "GNU")
#    target_compile_options(imgui PUBLIC -fprofile-arcs -ftest-coverage)
#    target_link_libraries(imgui PUBLIC -fprofile-arcs -ftest-coverage)
#    target_link_libraries(imgui PUBLIC gcov)
#endif ()
#if (IMGUI_ENABLE_ASAN AND CMAKE_CXX_COMPILER_ID MATCHES "GNU")
#    target_compile_options(imgui PUBLI -fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls)
#    target_link_libraries(imgui PUBLI -g -fsanitize=address)
#endif ()


###############################################################################
# Misc
###############################################################################
set(IMGUI_MISC_DIR ${IMGUI_ROOT_DIR}/misc)

if (IMGUI_ENABLE_FREETYPE)
    message(STATUS "IMGUI_ENABLE_FREETYPE: ${IMGUI_ENABLE_FREETYPE}")
    add_library(imgui-freetype INTERFACE)
    target_sources(imgui-freetype INTERFACE
            ${IMGUI_MISC_DIR}/freetype/imgui_freetype.h
            ${IMGUI_MISC_DIR}/freetype/imgui_freetype.cpp
    )
    target_include_directories(imgui-freetype  INTERFACE ${IMGUI_ROOT_DIR})
    find_package(Freetype)
    message(STATUS "FREETYPE_FOUND: ${FREETYPE_FOUND}")
    if (FREETYPE_FOUND)
        message(STATUS "Freetype found: ${FREETYPE_INCLUDE_DIRS} ${FREETYPE_LIBRARIES}")
        target_include_directories(imgui-freetype INTERFACE ${FREETYPE_INCLUDE_DIRS})
        target_link_libraries(imgui-freetype INTERFACE ${FREETYPE_LIBRARIES})
    elseif (EXISTS ../freetype)
        message(STATUS "Freetype not found, building from source.")
        set(SKIP_INSTALL_ALL ON)
        add_subdirectory(../freetype ${CMAKE_BINARY_DIR}/freetype)
        target_link_libraries(imgui-freetype INTERFACE freetype)
    else ()
        message(FATAL_ERROR "IMGUI_ENABLE_FREETYPE but FreeType was not found.")
    endif ()
    target_compile_definitions(imgui-freetype INTERFACE -DIMGUI_ENABLE_FREETYPE=1)
    target_link_libraries(imgui INTERFACE imgui-freetype)
endif ()
